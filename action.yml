name: NuGet Push
author: David G. Moore, Jr., <david@dgmjr.io>
description: Push the *.nupkg to NuGet feeds

branding:
  icon: upload-cloud
  color: blue

inputs:
  environment:
    description: The environment to use for the build
    default: Local
    required: false
  git-token:
    description: The GitHub token to use for authentication
    required: true
  git-username:
    description: The GitHub username to use for authentication
    required: false
    default: dgmjr
  git-nuget-endpoint:
    description: The GitHub NuGet endpoint to use for the NuGet package
    required: false
    default: https://nuget.pkg.github.com/dgmjr-io/index.json
  private-nuget-endpoint:
    description: The private NuGet endpoint to use for the NuGet package
    required: false
    default: https://dgmjr.nuget.software/index.json
  private-nuget-api-key:
    description: The private NuGet API key to use for the NuGet package
    required: false
  nuget-api-key:
    description: The NuGet API key to use for the NuGet package
    required: false
  repo:
    description: The GitHub repository to use for the build
    required: true
  configuration:
    description: The configuration to use for the build
    required: false
    default: Release
  package-version-override:
    description: The package version to use for the build
    required: false
    default: 0.0.1
  project-file-path:
    description: The project file path to use for the build
    required: true
  push-nuget:
    description: Push the *.nupkg to NuGet
    required: true
    default: 'false'
  push-dgmjr-io:
    description: Push the *.nupkg to dgmjr.io
    required: true
    default: 'true'
  push-github:
    description: Push the *.nupkg to GitHub
    required: true
    default: 'false'

runs:
  using: composite
  steps:
    - id: Run-setup-dgmjrsdk
      uses: dgmjr-actions/setup-dgmjrsdk@main
      with:
        git-token: ${{ inputs.git-token }}
        environment: Release
        git-nuget-endpoint: ${{ inputs.git-nuget-endpoint }}
        private-nuget-endpoint: ${{ inputs.private-nuget-endpoint }}
        private-nuget-api-key: ${{ inputs.private-nuget-api-key }}
        nuget-api-key: ${{ inputs.nuget-api-key }}
    - id: Download-NuGet-Package
      uses: actions/download-artifact@v2.1.1
      with:
        name: NuGetPackage(s)
    # - id: Get-Package-Name
    #   shell: pwsh
    #   run: echo "PackageName=$([System.IO.Path]::GetFileNameWithoutExtension("${{ inputs.project-file-path }}"))" >> "$GITHUB_OUTPUT"
    # - id: Get-Organization
    #   shell: pwsh
    #   run: echo "Organization=$("${{ inputs.repo }}".Split('/')[1])" >> "$GITHUB_OUTPUT"
    # - id: Get-Package-Version
    #   shell: pwsh
    #   run: echo "Version=$(Push-Location && Set-Location $([System.IO.Path]::GetDirectoryName("${{ inputs.project-file-path }}")) && minver && Pop-Location)" >> $"GITHUB_OUTPUT"
    # - id: Delete-GitHub-Package-Version
    #   uses: dgmjr-actions/delete-github-package-version@main
    #   with:
    #     git-token: ${{ inputs.git-token }}
    #     package-name: ${{ steps.Get-Package-Name.outputs.PackageName }}
    #     organization: ${{ steps.Get-Organization.outputs.Organization }}
    #     package-type: nuget
    #     package-version: ${{ steps.Get-Package-Version.outputs.Version }}
    #     repo: ${{ inputs.repo }}
    # - id: Push-to-GitHub-Packages
    #   shell: bash
    #   run: dotnet nuget push **/*.nupkg --source GitHub --api-key ${{ inputs.git-token }}
    #   if: inputs.push-github == 'true'
    - id: Publish-NuGet-to-DGMJR-IO-private-feed
      shell: bash
      run: dotnet nuget push **/*.nupkg --source dgmjr-io --api-key ${{ inputs.private-nuget-api-key }}
      if: inputs.push-dgmjr-io == 'true'
    - id: Publish-NuGet-to-NuGet-public-feed
      shell: bash
      run: dotnet nuget push **/*.nupkg --source nuget.org --api-key ${{ inputs.nuget-api-key }}
      if: inputs.push-nuget == 'true'
